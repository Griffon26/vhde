The following design choices were made:

1a) Layout classes do not know about VHDL classes and vice versa.

   Everything needed to keep them consistent is implemented in the GUI
   classes.

1b) Layout classes do use the INamedItem interface of VHDL classes

  When Layout objects are read in from file they refer to VHDL objects by
  name. This name is used to look up the corresponding VHDL object. A
  reference to this object (in the form of a INamedItem pointer) is then
  stored in the Layout object. The only call available on the INamedItem
  interface is getName().

  Gui classes know which VHDL classes are associated with which Layout
  classes, so they can request the INamedItem object and cast it back to a
  VHDL object.

2) VHDL classes themselves are responsible for keeping the VHDL model
   consistent.

   This means that all changes to a VHDL object are propagated to the
   relevant other VHDL objects by either function calls or signals.

3) The same holds for Layout classes

4) When an object (e.g. a port) is added to a container (e.g. the component),
   the "added" signal is emitted by the container.  When an object is removed
   the object itself emits a "removed" signal.

   This is a bit asymmetrical.

   It's clear that there is no other option than for the container to send the
   "added" signal (what else is there to subscribe to before the new object
   has been added).

   The reason for making the object itself emit the "removed" signal is that
   it is useful to be able to bind an identifier specific to the removed
   object to speed up signal handling. For instance a VHDLInstance maintains a
   std::map from VHDLSignal* to VHDLPort*.  By subscribing to the "removed"
   signal on the port and binding a VHDLSignal*, the callback can quickly find
   the entry to remove from the map.

   Additionally the VHDLInstance would only receive the "removed" when
   associated signals and ports are removed, not when other ports on the
   component or other signals in the architecture are removed. Just like
   VHDLInstances that do not have the removed signal/port will not be
   called to handle the "removed" signal at all.

   It also means the VHDLInstance doesn't have to know about VHDLArchitecture.

   Storage of multiple connection objects is not a concern as long as objects
   are required to send the "removed" signal from their destructors. Then the
   call to the signal handler is guaranteed to be the last one for that
   object, so there is no need to disconnect.

   A difficulty introduced by having objects like ports send their own
   "removed" signals is that they should preferably send along their location
   within their container (edge and position in case of ports). This
   information is stored in and managed by the container because only it
   can see all possible positions, see what's free, etc. So I decided to
   duplicate these values in the object itself and make the container
   responsible for keeping them consistent.


The sequence diagrams illustrate some of these design choices.
